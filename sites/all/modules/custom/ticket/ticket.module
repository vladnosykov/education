<?php
/**
 * @file
 * Module file for ticket.
 */

/**
* Implements hook_entity_info();
*/
function ticket_entity_info() {
  $info['ticket'] = array(
    'label' => t('Ticket'),
    'controller class' => 'TicketController',
    'base table' => 'ticket',
    'uri callback' => 'ticket_uri',
    'load hook' => 'ticket_load',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'ticket_id' ,
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Fetch a basic object.
 */
function ticket_load($ticket_id = NULL, $reset = FALSE) {
  $ticket_ids = (isset($ticket_id) ? array($ticket_id) : array());
  $ticket = ticket_load_multiple($ticket_ids, array(), $reset);
  return $ticket ? reset($ticket) : FALSE;
}

/**
 * Loads multiple basic entities.
 */
function ticket_load_multiple($ticket_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('ticket', $ticket_ids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function ticket_uri($basic) {
  return array(
    'path' => 'ticket/' . $ticket->ticket_id,
  );
}

/**
 * Implements hook_menu().
 */
function ticket_menu() {

  $items['admin/structure/ticket/manage'] = array(
    'title' => 'Administer ticket entity type',
    'page callback' => 'ticket_list_entities',
    'access arguments' => array('administer ticket entities'),
  );

  $items['admin/structure/ticket/manage/add'] = array(
    'title' => 'Add an Ticket Entity',
    'page callback' => 'ticket_add',
    'access arguments' => array('create ticket entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/ticket/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['ticket/%ticket'] = array(
    'title callback' => 'ticket_title',
    'title arguments' => array(1),
    'page callback' => 'ticket_view',
    'page arguments' => array(1),
    'access arguments' => array('view any ticket entity'),
  );

  $items['ticket/%ticket/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['ticket/%ticket/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ticket_form', 1),
    'access arguments' => array('edit any ticket entity'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['ticket/add'] = array(
    'title' => 'Add a Ticket Entity',
    'page callback' => 'ticket_add',
    'access arguments' => array('create ticket entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ticket_permission() {
  $permissions = array(
    'administer ticket entities' => array(
      'title' => t('Administer ticket entities'),
    ),
    'view any ticket entity' => array(
      'title' => t('View any ticket entity'),
    ),
    'edit any ticket entity' => array(
      'title' => t('Edit any ticket entity'),
    ),
    'create ticket entities' => array(
      'title' => t('Create ticket entities'),
    ),
  );
  return $permissions;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ticket_title($entity) {
  return $entity->ticket_title;
}

function ticket_view($entity, $view_mode = 'full') {
  $entity_type = 'ticket';
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->ticket_id => $entity), $view_mode);
  entity_prepare_view($entity_type, array($entity->ticket_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  
  $entity->content['ticket_type'] = array(
    '#type' => 'item',
    '#title' => t('Ticket type'),
    '#markup' => $entity->ticket_type,
  );

  $entity->content['ticket_price'] = array(
    '#type' => 'item',
    '#title' => t('Ticket price'),
    '#markup' => '$'. $entity->ticket_price,
  );

  $entity->content['ticket_validto'] = array(
    '#type' => 'item',
    '#title' => t('Ticket valid to'),
    '#markup' => $entity->ticket_validto,
  );

  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ticket_view', 'entity_view'),
    $entity->content, $entity_type);

  return $entity->content;
}

/**
 * Returns a render array with all ticket entities.
 */
function ticket_list_entities() {
  $content = array();
  $entities = ticket_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $rows[] = array(
        'data' => array(
          'id' => $entity->ticket_id,
          'ticket_title' => l($entity->ticket_title, 'ticket/' . $entity->ticket_id),
        ),
      );
    }
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Ticket Title')),
    );
  }
  else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No ticket entities currently exist.'),
    );
  }
  return $content;
}

/**
 * Implements hook_field_extra_fields().
 */
function ticket_field_extra_fields() {
  $form_elements['ticket_title'] = array(
    'label' => t('Ticket Title'),
    'description' => t('Ticket Title (an extra form field)'),
    'weight' => -5,
  );
  $form_elements['ticket_type'] = array(
    'label' => t('Ticket Type'),
    'description' => t('Ticket Type (an extra form field)'),
    'weight' => -4,
  );
  $form_elements['ticket_price'] = array(
    'label' => t('Ticket Price'),
    'description' => t('Ticket Price (an extra form field)'),
    'weight' => -3,
  );
  $form_elements['ticket_validto'] = array(
    'label' => t('Ticket Valid to'),
    'description' => t('Ticket Valid to (an extra form field)'),
    'weight' => -2,
  );

  $display_elements['ticket_title'] = array(
    'label' => t('Ticket Title'),
    'description' => t('Ticket Title (an extra display field)'),
    'weight' => 0,
  );

  $display_elements['ticket_type'] = array(
    'label' => t('Ticket Type'),
    'description' => t('Ticket Type (an extra display field)'),
    'weight' => 0,
  );
  
  $display_elements['ticket_price'] = array(
    'label' => t('Ticket Price'),
    'description' => t('Ticket Price (an extra display field)'),
    'weight' => 0,
  );
  
  $display_elements['ticket_validto'] = array(
    'label' => t('Ticket Valid to'),
    'description' => t('Ticket Title (an extra display field)'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['ticket']['form'] = $form_elements;
  $extra_fields['ticket']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ticket_add() {
  $entity = entity_get_controller('ticket')->create();
  return drupal_get_form('ticket_form', $entity);
}

/**
 * Form function to create an ticket entity.
 */
function ticket_form($form, &$form_state, $entity) {
  $form['ticket_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket Title'),
    '#required' => TRUE,
    '#default_value' => $entity->ticket_title,
  );

  $form['ticket_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket Price'),
    '#required' => TRUE,
    '#field_prefix' => '$',
    '#default_value' => $entity->ticket_price,
    '#element_validate' => array('element_validate_number'),
  );

  $form['ticket_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket Type'),
    '#required' => TRUE,
    '#default_value' => $entity->ticket_type,
  );

  $format = 'Y-m-d H:i';
  $form['ticket_validto'] = array(
     '#type' => 'date_select',
     '#title' => t('Select ticket expiration date'),
     '#default_value' => $entity->ticket_validto,
     '#date_format' => $format,
     '#date_label_position' => 'within',
     '#date_increment' => 15,
     '#date_year_range' => '-3:+3',
  );

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('ticket', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('ticket_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}

/**
 * Form submit handler: Submits basic_add_form information.
 */
function ticket_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->ticket_title = $form_state['values']['ticket_title'];
  $entity->ticket_price = $form_state['values']['ticket_price'];
  $entity->ticket_type = $form_state['values']['ticket_type'];
  $entity->ticket_validto = $form_state['values']['ticket_validto'];
  field_attach_submit('ticket', $entity, $form, $form_state);
  $entity = ticket_save($entity);
  $form_state['redirect'] = 'ticket/' . $entity->ticket_id;
}

/**
 * Form deletion handler.
 */
function ticket_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  ticket_delete($entity);
  drupal_set_message(t('The entity %ticket_title (ID %id) has been deleted',
    array('%item_description' => $entity->ticket_title, '%id' => $entity->ticket_id))
  );
  $form_state['redirect'] = 'admin/structure/ticket/manage';
}

/**
 * We save the entity by calling the controller.
 */
function ticket_save(&$entity) {
  return entity_get_controller('ticket')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ticket_delete($entity) {
  entity_get_controller('ticket')->delete($entity);
}

/**
 * TicketControllerInterface definition.
 */
interface TicketControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();
  public function save($entity);
  public function delete($entity);

}

class TicketController
  extends DrupalDefaultEntityController
  implements TicketControllerInterface {

  /**
   * Create and return a new ticket entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ticket';
    $entity->ticket_id = 0;
    $entity->ticket_title = '';
    $entity->ticket_price = '';
    $entity->ticket_type = 'standart';
    $date = format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s');
    $entity->ticket_validto = $date;
    //dpm($entity);
    return $entity;
  }
  
  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, give it a time of creation.
    if (empty($entity->ticket_id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ticket');

    $primary_keys = $entity->ticket_id ? 'ticket_id' : array();
    drupal_write_record('ticket', $entity, $primary_keys);
    $invocation = 'entity_insert';

    if (empty($primary_keys)) {
      field_attach_insert('ticket', $entity);
    }
    else {
      field_attach_update('ticket', $entity);
      $invocation = 'entity_update';
    }

    module_invoke_all($invocation, $entity, 'ticket');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more entity.
   */
  public function deleteMultiple($entities) {
    $ticket_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          module_invoke_all('entity_delete', $entity, 'ticket');
          field_attach_delete('ticket', $entity);
          $ticket_ids[] = $entity->ticket_id;
        }
        db_delete('ticket')
          ->condition('ticket_id', $ticket_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ticket', $e);
        throw $e;
      }
    }
  }
}